
#include "engine.h"

const char** const EngineVersion = (const char**)0x691870;
const char** const EngineDate = (const char**)0x691874;
char* const LastSavePath = (char*)0x9A66C9;
char* const MapFilePath = (char*)0x94A2BC;
char* const StrBuffer = (char*)0x9B86A0;
BASE** const CurrentBase = (BASE**)0x90EA30;
int* const CurrentBaseID = (int*)0x689370;
int* const ComputeBaseID = (int*)0x689374; // changed whenever base_compute values are refreshed
int* const BaseUpkeepDrawID = (int*)0x6E8134;
int* const BaseReservedTiles = (int*)0x90EA00;
int* const BaseFindDist = (int*)0x90EA04;
int* const BaseGrowthRate = (int*)0x90E918;
int* const BaseUpkeepFlag = (int*)0x90E934;
int* const BaseUpkeepState = (int*)0x90EA34;
int* const BasePsychNDrones = (int*)0x90E920; // [5] base psych rows
int* const BasePsychSDrones = (int*)0x90E94C; // [5] base psych rows
int* const BasePsychTalents = (int*)0x90E984; // [5] base psych rows
int* const BaseTileFlags = (int*)0x90E99C; // [25] for base radius but only first 21 used
int* const BaseResourceConvoyFrom = (int*)0x90E904; // [4] for each resource type
int* const BaseResourceConvoyTo = (int*)0x90E93C; // [4] for each resource type
int* const BaseVehPacifismCount = (int*)0x90E980;
int* const BaseForcesSupported = (int*)0x90E8FC;
int* const BaseForcesMaintCost = (int*)0x90E91C;
int* const BaseForcesMaintCount = (int*)0x90EA08;
int* const BaseCommerceImport = (int*)0x90EA0C; // [8] for each faction trading with this base
int* const BaseCommerceExport = (int*)0x90E960; // [8] for each faction trading with this base
int* const BaseTerraformEnergy = (int*)0x90E914;
int* const BaseTerraformReduce = (int*)0x90E998;
int* const ReplayEventSize = (int*)0x9469F8;
int* const ScnVictFacilityObj = (int*)0x9A6814;
int* const SolarFlaresEvent = (int*)0x9A6818;
int* const BaseCount = (int*)0x9A64CC;
int* const VehCount = (int*)0x9A64C8;
int* const GameLanguage = (int*)0x9BC054;
int* const GamePreferences = (int*)0x9A6490;
int* const GameMorePreferences = (int*)0x9A6494;
int* const GameWarnings = (int*)0x9A6498;
int* const GameState = (int*)0x9A64C0;
int* const GameRules = (int*)0x9A649C;
int* const GameMoreRules = (int*)0x9A681C;
int* const DiffLevel = (int*)0x9A64C4;
int* const ExpansionEnabled = (int*)0x9A6488;
int* const MultiplayerActive = (int*)0x93F660; // DirectPlay, Internet (TCP/IP)
int* const PbemActive = (int*)0x93A95C; // HotSeat / PBEM
int* const CurrentTurn = (int*)0x9A64D4;
int* const CurrentFaction = (int*)0x9A6820; // active faction for turn processing
int* const CurrentPlayerFaction = (int*)0x939284; // MapWin->cOwner
int* const TechValidCount = (int*)0x949730;
int* const TechCommerceCount = (int*)0x949734;
int* const MapRandomSeed = (int*)0x949878;
int* const MapToggleFlat = (int*)0x94988C;
int* const MapAreaTiles = (int*)0x949884;
int* const MapAreaSqRoot = (int*)0x949888;
int* const MapAreaX = (int*)0x949870;
int* const MapAreaY = (int*)0x949874;
int* const MapHalfX = (int*)0x68FAF0;
int* const MapSizePlanet = (int*)0x94A2A0;
int* const MapOceanCoverage = (int*)0x94A2A4;
int* const MapLandCoverage = (int*)0x94A2A8; // 2 - MapOceanCoverage
int* const MapErosiveForces = (int*)0x94A2AC;
int* const MapPlanetaryOrbit = (int*)0x94A2B0; // affects temperature
int* const MapCloudCover = (int*)0x94A2B4; // affects rainfall, rivers
int* const MapNativeLifeForms = (int*)0x94A2B8;
int* const MapLandmarkCount = (int*)0x949890;
int* const MapSeaLevel = (int*)0x94987C;
int* const MapSeaLevelCouncil = (int*)0x949880;
int* const MapAbstractLongBounds = (int*)0x94A294;
int* const MapAbstractLatBounds = (int*)0x94A298;
int* const MapAbstractArea = (int*)0x94A29C;
int* const MapBaseSubmergedCount = (int*)0x9B2290; // [8]; reset each time global alt changes
int* const MapBaseIdClosestSubmergedVeh = (int*)0x9B22BC; // [8]; reset each time global alt changes
int* const BrushVal1 = (int*)0x9B22B0;
int* const BrushVal2 = (int*)0x9B22B8;
int* const WorldBuildVal1 = (int*)0x9B22B4;
int* const AltNaturalDefault = (int*)0x68FAF4;
int* const AltNatural = (int*)0x68FB4C;
int* const ObjectiveReqVictory = (int*)0x94B4C0;
int* const ObjectivesSuddenDeathVictory = (int*)0x94B4C4;
int* const ObjectiveAchievePts = (int*)0x94B4C8;
int* const VictoryAchieveBonusPts = (int*)0x94B4CC;
int* const CurrentMissionYear = (int*)0x9A64D8;
int* const StartingMissionYear = (int*)0x94B4D0; // Normal starting year
int* const EndingMissionYear = (int*)0x94B4D4; // Normal ending year for the difficulty level
int* const TectonicDetonationCount = (int*)0x946138; // [8]; value for each faction
int* const ClimateValueA = (int*)0x9A67CC;
int* const ClimateValueB = (int*)0x9A67D0;
int* const ClimateValueC = (int*)0x9A67D4;
int* const ClimateFutureChange = (int*)0x9A67D8;
int* const SunspotDuration = (int*)0x9A6800;
int* const MountPlanetX = (int* )0x9A6804;
int* const MountPlanetY = (int* )0x9A6808;
int* const DustCloudDuration = (int*)0x9A680C;
int* const GovernorFaction = (int*)0x9A6614;
int* const ProposalPassCount = (int*)0x9A6618;
int* const gender_default = (int*)0x9BBFEC;
int* const plurality_default = (int*)0x9BBFF0;
int* const diplo_second_faction = (int*)0x93F7CC;
int* const diplo_third_faction = (int*)0x93F7D4;
int* const diplo_tech_faction = (int*)0x93FA38;
int* const reportwin_opponent_faction = (int*)0x8A4164;
int* const dword_93A958 = (int*)0x93A958;
int* const diplo_value_93FA24 = (int*)0x93FA24;
int* const diplo_value_93FA70 = (int*)0x93FA70;
int* const diplo_value_93FA98 = (int*)0x93FA98;
int* const diplo_entry_id = (int*)0x93FAA8;
int* const diplo_counter_proposal_id = (int*)0x93FAB0;
int* const diplo_current_proposal_id = (int*)0x93FA34;
int* const diplo_ask_base_swap_id = (int*)0x93FA7C;
int* const diplo_bid_base_swap_id = (int*)0x93FA30;
int* const diplo_tech_id1 = (int*)0x93F800;
int* const diplo_tech_id2 = (int*)0x93FA18;
int* const VehAttackFlags = (int*)0x93E904;
int* const VehDrawAttackID = (int*)0x689F28;
int* const VehDrawDefendID = (int*)0x689F2C;
int* const CurrentVehID = (int*)0x9A64DC;
int* const dword_6E8150 = (int*)0x6E8150;
int* const dword_7AD330 = (int*)0x7AD330;
int* const dword_74DA9C = (int*)0x74DA9C; // ambience sound related
int* const dword_7FE06C = (int*)0x7FE06C;
int* const dword_8C6B3C = (int*)0x8C6B3C;
int* const dword_90DB84 = (int*)0x90DB84; // action_terraform
int* const dword_90EA3C = (int*)0x90EA3C;
int* const dword_93A96C = (int*)0x93A96C;
int* const dword_93A98C = (int*)0x93A98C;
int* const dword_93E960 = (int*)0x93E960;
int* const dword_9A6510 = (int*)0x9A6510;
int* const dword_9B206C = (int*)0x9B206C;
int* const ScreenWidth = (int*)0x9B7B1C;
int* const ScreenHeight = (int*)0x9B7B20;
char256* const ParseStrBuffer = (char256*)0x9BB5E8;
int* const ParseNumTable = (int*)0x9BB598;
int* const ParseStrPlurality = (int*)0x9BB570;
int* const ParseStrGender = (int*)0x9BB5C0;
int* const DialogChoices = (int*)0x9BC06C;
int* const DialogToggle = (int*)0x9BC070;
int* const GameHalted = (int*)0x68F21C;
int* const ControlTurnA = (int*)0x9B2068;
int* const ControlTurnB = (int*)0x93A948;
int* const ControlTurnC = (int*)0x93A938;
int* const ControlUpkeepA = (int*)0x93A934;
int* const ControlWaitLoop = (int*)0x703DE0;
int* const SkipTechScreenA = (int*)0x945F40; // non-zero skips popups, used in tech_achieved and tech_advance
int* const SkipTechScreenB = (int*)0x945F44; // non-zero skips popups, used in base_change and tech_advance
int* const NetUpkeepState = (int*)0x945F48;
int* const WorldAddTemperature = (int*)0x9B22E8;
int* const WorldSkipTerritory = (int*)0x9B22EC;
int* const GameDrawState = (int*)0x90D91C;
int* const WinModalState = (int*)0x9B7AE4;
int* const DiploWinState = (int*)0x93FAB4; // Non-zero when diplomacy communication active
int* const PopupDialogState = (int*)0x6A721C; // Non-zero when most popups or scrollable lists are visible
RECT* const RenderTileBounds = (RECT*)0x7D3C28;

int* const VehDropLiftVehID = (int*)0x9B2280;
int* const VehLiftX = (int*)0x9B2278;
int* const VehLiftY = (int*)0x9B2284;
int* const VehBitError = (int*)0x9B228C;
int* const VehBasicBattleMorale = (int*)0x912420; // [2] ; [0] offense, [1] defense
int* const VehBattleModCount = (int*)0x915614; // [2] ; [0] offense, [1] defense
int* const VehBattleState = (int*)0x91561C; // [2] ; planet_busting() + boom() + timers
int (*const VehBattleModifier)[4] = (int (*)[4])0x9155F0; // [2][4]
char (*const VehBattleDisplay)[4][80] = (char (*)[4][80])0x90F554; // [2][4][80]
char** const VehBattleDisplayTerrain = (char**)0x90F550;
int* const ProbeHasAlgoEnhancement = (int*)0x945B30;
int* const ProbeTargetFactionID = (int*)0x945B34;
int* const ProbeTargetHasHSA = (int*)0x945B38;

uint8_t* const TechOwners = (uint8_t*)0x9A6670;
int* const SecretProjects = (int*)0x9A6514;
int* const CostRatios = (int*)0x689378;
// [2] Bitfields for player controlled/active faction status
uint8_t* const FactionStatus = (uint8_t*)0x9A64E8;
// [1000][8] ? Per turn might ratings for each faction
int16_t (*const FactionTurnMight)[8] = (int16_t (*)[8])(0x9A68AC);
// [8] Current relative faction ranking
int* const FactionRankings = (int*)0x9A64EC;
int* const RankingFactionIDUnk1 = (int*)0x9A650C;
int* const RankingFactionIDUnk2 = (int*)0x9A6510;
int* const FactionRankingsUnk = (int*)0x945DD8; // [8]
int* const DiploFriction = (int*)0x93FA74; // not always bounded, should it be 0-20?
int* const DiploFrictionFactionIDWith = (int*)0x93FABC;
int* const DiploFrictionFactionID = (int*)0x93FAC0;

VEH ArrayVehs[MaxVehModNum+2] = {}; // note veh_fake placeholder
VEH* const VehsMod = &ArrayVehs[0];

ThinkerData*    ThinkerVars      = (ThinkerData*)&MFactions[0].pad_2[0];
MFaction*       MFactions        = (MFaction*      )0x946A50;
Faction*        Factions         = (Faction*       )0x96C9E0;
BASE*           Bases            = (BASE*          )0x97D040;
UNIT*           Units            = (UNIT*          )0x9AB868;
VEH* const      VehsDef          = (VEH*           )0x952828; // [2049] len: 0x01A034 end: 0x96C85C
VEH*            Vehs             = VehsDef;
MAP**           MapTiles         = (MAP**          )0x94A30C;
uint8_t**       MapAbstract      = (uint8_t**      )0x94A310;
Continent*      Continents       = (Continent*     )0x9AA730; // [128]
Landmark*       Landmarks        = (Landmark*      )0x949894; // [64]
Console*        MapWin           = (Console*       )0x9156B0; // len: 0x247A4 end: 0x939E54
BaseWindow*     BaseWin          = (BaseWindow*    )0x6A7628;
Win*            BattleWin        = (Win*           )0x6EEED8;
Win*            CouncilWin       = (Win*           )0x6FEC80;
Win*            DatalinkWin      = (Win*           )0x703EA0;
Win*            DesignWin        = (Win*           )0x71F2B0;
Win*            DiploWin         = (Win*           )0x73ACD8;
Win*            FameWin          = (Win*           )0x74DAF8;
Win*            InfoWin          = (Win*           )0x7AD2A0;
Win*            MainWin          = (Win*           )0x7AE820;
FlatButton*     FlatButtons      = (FlatButton*    )0x7AF620;
Win*            StringBox        = (Win*           )0x7CD2EC;
Win*            DetailWin        = (Win*           )0x7D3C40; // Lower right view on world map
Win*            BaseMapWin       = (Win*           )0x7D4060; // Additional base terrain view
Win*            MessageWin       = (Win*           )0x7F67F8;
Win*            MonuWin          = (Win*           )0x7F9F58;
Win*            MultiWin         = (Win*           )0x7FD648;
Win*            NetWin           = (Win*           )0x80A6F8;
Win*            NetTechWin       = (Win*           )0x811E40;
Win*            PickWin          = (Win*           )0x822718;
Win*            PlanWin          = (Win*           )0x834D70;
Win*            PrefWin          = (Win*           )0x8578D8;
Win*            ReportWin        = (Win*           )0x876478;
Win*            SocialWin        = (Win*           )0x8A6270;
Win*            StatusWin        = (Win*           )0x8C5568;
Win*            TutWin           = (Win*           )0x8C6E68;
Win*            WorldWin         = (Win*           )0x8E9F60; // Lower right view on world map
Font**          MapLabelFont     = (Font**         )0x93FC24;
Sprite**        FactionPortraits = (Sprite**       )0x6846D8;
void*           Sounds           = (void*          )0x749CF8;
void*           NetMsg           = (void*          )0x805338;
AlphaNet*       NetState         = (AlphaNet*      )0x93CD90;
Lock*           LockState        = (Lock*          )0x93E230;
Path*           Paths            = (Path*          )0x945B00;
FileFindPath*   FileFind         = (FileFindPath*  )0x9B8198;
void*           TextTable        = (void*          )0x9B90D8;
Label*          TextLabels       = (Label*         )0x9B90F8;

CTerraform*     Terraform        = (CTerraform*    )0x691878;
CResourceInfo*  ResInfo          = (CResourceInfo* )0x945F50;
CCitizen*       Citizen          = (CCitizen*      )0x946020;
CResourceName*  ResName          = (CResourceName* )0x946158;
CCombatMode*    OffenseMode      = (CCombatMode*   )0x946178;
CBonusName*     BonusName        = (CBonusName*    )0x9461A8;
CSocialParam*   SocialParam      = (CSocialParam*  )0x946580;
CCombatMode*    DefenseMode      = (CCombatMode*   )0x946A00;
CRules*         Rules            = (CRules*        )0x949738;
CEnergy*        Energy           = (CEnergy*       )0x94A318;
CChassis*       Chassis          = (CChassis*      )0x94A330;
CNatural*       Natural          = (CNatural*      )0x94ADE0;
CWeapon*        Weapon           = (CWeapon*       )0x94AE60;
CSocialField*   SocialField      = (CSocialField*  )0x94B000;
DefaultPref*    DefaultPrefs     = (DefaultPref*   )0x94B350;
AlphaIniPref*   AlphaIniPrefs    = (AlphaIniPref*  )0x94B464;
CMandate*       Mandate          = (CMandate*      )0x94B4A0;
CMight*         Might            = (CMight*        )0x94C558;
Monument*       Monuments        = (Monument*      )0x94CA08;
CTimeControl*   TimeControl      = (CTimeControl*  )0x94F1B8;
CArmor*         Armor            = (CArmor*        )0x94F278;
CTech*          Tech             = (CTech*         )0x94F358;
CWorldbuilder*  WorldBuilder     = (CWorldbuilder* )0x9502A8;
ReplayEvent*    ReplayEvents     = (ReplayEvent*   )0x950324;
CMorale*        Morale           = (CMorale*       )0x952328;
CReactor*       Reactor          = (CReactor*      )0x9527F8;
COrder*         Order            = (COrder*        )0x96C878;
CFacility*      Facility         = (CFacility*     )0x9A4B68;
CProposal*      Proposal         = (CProposal*     )0x9A6828;
CAbility*       Ability          = (CAbility*      )0x9AB538;
char**          Compass          = (char**         )0x945D48; // [8]
char**          PlansShortName   = (char**         )0x945FE0; // [15]
char**          Repute           = (char**         )0x946A30; // [8]
char**          Difficulty       = (char**         )0x96C85C; // [6]
char**          Mood             = (char**         )0x94C9E4; // [9]
char**          TriadName        = (char**         )0x94F1A8; // [3]
char**          PlansFullName    = (char**         )0x952360; // [15]

FGenString amovie_project                  = (FGenString           )0x403BE0;
FPOP2 POP2                                 = (FPOP2                )0x405140;
FPOP3 POP3                                 = (FPOP3                )0x4055A0;
FPopup_start Popup_start                   = (FPopup_start         )0x406380;
FGenWin BaseWin_focus                      = (FGenWin              )0x415DD0;
FBaseWin_zoom BaseWin_zoom                 = (FBaseWin_zoom        )0x41A920;
FGenWin BaseWin_nerve_staple               = (FGenWin              )0x41B4F0;
FGenWin BaseWin_on_redraw                  = (FGenWin              )0x41E790;
FDesignWin_exec DesignWin_exec             = (FDesignWin_exec      )0x43E9A0;
FGenVoid SubInterface_delete_iface_mode    = (FGenVoid             )0x45D2E0;
FGenVoid SubInterface_set_iface_mode       = (FGenVoid             )0x45D310;
FGenVoid SubInterface_release_iface_mode   = (FGenVoid             )0x45D380;
fp_none draw_cursor                        = (fp_none              )0x46AE00;
fp_4int draw_radius                        = (fp_4int              )0x46AEF0;
fp_3int draw_tile                          = (fp_3int              )0x46AF40;
fp_4int draw_tile_fixup                    = (fp_4int              )0x46AF90;
fp_6int draw_tile_fixup2                   = (fp_6int              )0x46B040;
fp_3int draw_tiles                         = (fp_3int              )0x46B140;
fp_1int draw_map                           = (fp_1int              )0x46B190;
FNetMsg NetMsg_close                       = (FNetMsg              )0x47A7D0;
FNetMsg_pop NetMsg_pop                     = (FNetMsg_pop          )0x47A890;
FPlanWin_blink PlanWin_blink               = (FPlanWin_blink       )0x48BC20;
Fpopp popp                                 = (Fpopp                )0x48C0A0;
Fpopb popb                                 = (Fpopb                )0x48C650;
fp_none turn_timer                         = (fp_none              )0x50EF10;
Fhas_abil has_abil                         = (Fhas_abil            )0x5BF1F0;
FX_pop X_pop                               = (FX_pop               )0x5BF480;
FX_pops X_pops                             = (FX_pops              )0x5BF930;
FWin_flip Win_flip                         = (FWin_flip            )0x5EFD20;
FWinProc WinProc                           = (FWinProc             )0x5F0650;
fp_none Win_get_key_window                 = (fp_none              )0x5F6A50;
FWin_update_screen Win_update_screen       = (FWin_update_screen   )0x5F7320;
FWin_is_visible Win_is_visible             = (FWin_is_visible      )0x5F7E90;
FBasePop_start BasePop_start               = (FBasePop_start       )0x601BF0;
FBaseButton_text BaseButton_set_bubble_text = (FBaseButton_text    )0x607550;
Fpop_ask_number pop_ask_number             = (Fpop_ask_number      )0x627C30;
FStringBox_clip_ids StringBox_clip_ids     = (FStringBox_clip_ids  )0x629A70;
fp_2int game_random                        = (fp_2int              )0x625810;
fp_1int game_reseed                        = (fp_1int              )0x6257E0;
fp_none game_rand                          = (fp_none              )0x64601D;
fp_1int game_srand                         = (fp_1int              )0x538FB0;

FConsole_new_base Console_new_base = (FConsole_new_base)0x4CF7C0;
FConsole_skip Console_skip = (FConsole_skip)0x4D0450;
FConsole_wait Console_wait = (FConsole_wait)0x4D04A0;
FConsole_unload Console_unload = (FConsole_unload)0x4D04E0;
FConsole_upgrade Console_upgrade = (FConsole_upgrade)0x4D06C0;
FConsole_sentry Console_sentry = (FConsole_sentry)0x4D2220;
FConsole_hold Console_hold = (FConsole_hold)0x4D24C0;
FConsole_give_veh Console_give_veh = (FConsole_give_veh)0x4D26A0;
FConsole_disband Console_disband = (FConsole_disband)0x4D2AC0;
FConsole_disband2 Console_disband2 = (FConsole_disband2)0x4D2DE0;
FConsole_activate Console_activate = (FConsole_activate)0x4D2F00;
FConsole_terraform Console_terraform = (FConsole_terraform)0x4D3470;
FConsole_destroy Console_destroy = (FConsole_destroy)0x4D52A0;
FConsole_oblit Console_oblit = (FConsole_oblit)0x4D5D30;
FConsole_go_to Console_go_to = (FConsole_go_to)0x4D61A0;
FConsole_road_to Console_road_to = (FConsole_road_to)0x4D7BE0;
FConsole_designate Console_designate = (FConsole_designate)0x4D7CF0;
FConsole_go_home Console_go_home = (FConsole_go_home)0x4D7DE0;
FConsole_set_patrol Console_set_patrol = (FConsole_set_patrol)0x4D7EE0;
FConsole_missile Console_missile = (FConsole_missile)0x4D7F60;
FConsole_automate Console_automate = (FConsole_automate)0x4D8A70;
FConsole_bomb_run Console_bomb_run = (FConsole_bomb_run)0x4D8CD0;
FConsole_set_road_to Console_set_road_to = (FConsole_set_road_to)0x4D8DC0;
FConsole_explore Console_explore = (FConsole_explore)0x4D8F40;
FConsole_convoy Console_convoy = (FConsole_convoy)0x4D8FA0;
FConsole_arty Console_arty = (FConsole_arty)0x4D9170;
FConsole_group Console_group = (FConsole_group)0x4D92D0;
FConsole Console_assemble = (FConsole)0x4D95F0;
FConsole Console_editor_on = (FConsole)0x4D9970;
FConsole_editor_who Console_editor_who = (FConsole_editor_who)0x4D9AD0;
FConsole Console_editor_diplomacy = (FConsole)0x4DB870;
FConsole Console_editor_reset_faction = (FConsole)0x4DBB40;
FConsole Console_editor_reset_tech = (FConsole)0x4DBC40;
FConsole Console_editor_personality = (FConsole)0x4DBD20;
FConsole Console_editor_strategy = (FConsole)0x4DBFB0;
FConsole Console_editor_rules = (FConsole)0x4DC230;
FConsole Console_editor_scen_rules = (FConsole)0x4DC520;
FConsole Console_editor_scen_victory = (FConsole)0x4DC860;
FConsole Console_editor_scen_param = (FConsole)0x4DCCC0;
FConsole Console_custom_my_faction = (FConsole)0x4DD1B0;
FConsole Console_editor_diff = (FConsole)0x4DD6F0;
FConsole_editor_edit_veh Console_editor_edit_veh = (FConsole_editor_edit_veh)0x4DDA50;
FConsole_editor_delete_veh Console_editor_delete_veh = (FConsole_editor_delete_veh)0x4DE960;
FConsole Console_editor_veh = (FConsole)0x4DED00;
FConsole Console_editor_view = (FConsole)0x4DF4F0;
FConsole Console_editor_tech = (FConsole)0x4DFAD0;
FConsole Console_editor_energy = (FConsole)0x4E0120;
FConsole Console_editor_date = (FConsole)0x4E0210;
FConsole Console_editor_reload = (FConsole)0x4E0290;
FConsole Console_editor_eliminate = (FConsole)0x4E05E0;
FConsole Console_editor_kill_vehicles = (FConsole)0x4E09B0;
FConsole Console_editor_save = (FConsole)0x4E09E0;
FConsole Console_editor_load = (FConsole)0x4E0A00;
FConsole_editor_paints Console_editor_paints = (FConsole_editor_paints)0x4E0A50;
FConsole Console_editor_minor_landmark = (FConsole)0x4E0AD0;
FConsole Console_editor_terrain = (FConsole)0x4E0B00;
FConsole Console_editor_set_brush = (FConsole)0x4E0EA0;
FConsole Console_editor_map_type = (FConsole)0x4E0F30;
FConsole Console_editor_polar = (FConsole)0x4E0F80;
FConsole Console_editor_climate = (FConsole)0x4E0FA0;
FConsole Console_editor_generate = (FConsole)0x4E0FD0;
FConsole Console_editor_fast = (FConsole)0x4E10C0;
FConsole Console_editor_resource_beacon = (FConsole)0x4E1190;
FConsole Console_editor_clear_random = (FConsole)0x4E1200;
FConsole Console_editor_clear = (FConsole)0x4E1290;
FConsole Console_editor_clear_vehicles = (FConsole)0x4E1300;
FConsole Console_editor_clear_terrain = (FConsole)0x4E1380;
FConsole Console_editor_rockiness = (FConsole)0x4E14A0;
FConsole_editor_landmark Console_editor_landmark = (FConsole_editor_landmark)0x4E14D0;
FConsole Console_editor_undo = (FConsole)0x4E1F20;
FConsole Console_editor_undo2 = (FConsole)0x4E1F30;
FConsole Console_edit_lock = (FConsole)0x4E1F40;
FConsole Console_editor_lock2 = (FConsole)0x4E1F70;
FConsole Console_corner_the_market = (FConsole)0x4E2000;
FConsole_Console Console_Console = (FConsole_Console)0x50F460;
FConsole_cursor_on Console_cursor_on = (FConsole_cursor_on)0x510490;
FConsole Console_cursor_off = (FConsole)0x510520;
FConsole Console_selected = (FConsole)0x5107E0;
FConsole_focus Console_focus = (FConsole_focus)0x5108A0;
FConsole_cursor_next Console_cursor_next = (FConsole_cursor_next)0x5109B0;
FConsole_ready_search Console_ready_search = (FConsole_ready_search)0x510CE0;
FConsole Console_ready = (FConsole)0x510F50;
FConsole_set_view Console_set_view = (FConsole_set_view)0x511480;
FConsole_set_move Console_set_move = (FConsole_set_move)0x511520;
FConsole Console_turn_hints = (FConsole)0x511800;
FConsole Console_give_hints = (FConsole)0x511BB0;
FConsole Console_veh_turn = (FConsole)0x513B90;
FConsole Console_human_turn = (FConsole)0x514050;
FConsole_set_cursor Console_set_cursor = (FConsole_set_cursor)0x5147E0;
FConsole_update_data Console_update_data = (FConsole_update_data)0x514880;
FConsole Console_retire_game = (FConsole)0x514B30;
FConsole Console_set_preferences = (FConsole)0x514EF0;
FConsole Console_set_adv_preferences = (FConsole)0x514F00;
FConsole Console_set_auto_preferences = (FConsole)0x514F10;
FConsole Console_set_base_preferences = (FConsole)0x514F20;
FConsole Console_set_audiovisual = (FConsole)0x514F30;
FConsole Console_set_map_display = (FConsole)0x514F40;
FConsole_set_ai Console_set_ai = (FConsole_set_ai)0x514F50;
FConsole_set_research Console_set_research = (FConsole_set_research)0x515010;
FConsole_zoom Console_zoom = (FConsole_zoom)0x5150D0;
FConsole Console_center = (FConsole)0x515400;
FConsole Console_survey = (FConsole)0x515450;
FConsole_chat Console_chat = (FConsole_chat)0x515770;
FConsole Console_time_controls = (FConsole)0x515900;
FConsole Console_show_movies = (FConsole)0x515F70;
FConsole_name_landmark Console_name_landmark = (FConsole_name_landmark)0x5162A0;
FConsole_erase_landmark Console_erase_landmark = (FConsole_erase_landmark)0x516490;
FConsole Console_zoom_to_upkeep_base = (FConsole)0x5165B0;
FConsole_cursor_key Console_cursor_key = (FConsole_cursor_key)0x5166D0;
FConsole Console_end_my_turn = (FConsole)0x5169F0;
FConsole Console_use_time_bonus = (FConsole)0x517060;
FConsole_veh_key Console_veh_key = (FConsole_veh_key)0x5171D0;
FConsole_on_key_click Console_on_key_click = (FConsole_on_key_click)0x5178C0;
FConsole_load_proc Console_load_proc = (FConsole_load_proc)0x51BBA0;
FConsole_iface_click Console_iface_click = (FConsole_iface_click)0x51BC70;
fp_1int Console_iface_click2 = (fp_1int)0x51D720;
FConsole Console_close = (FConsole)0x51D7D0;
FConsole_init Console_init = (FConsole_init)0x51D890;

FMapWin_MapWin MapWin_MapWin = (FMapWin_MapWin)0x4626E0;
FMapWin_MapWin MapWin_clear = (FMapWin_MapWin)0x462870;
FMapWin MapWin_calculate_dimensions = (FMapWin)0x462980;
FMapWin_pixel_to_tile MapWin_pixel_to_tile = (FMapWin_pixel_to_tile)0x463040;
FMapWin_tile_to_pixel MapWin_tile_to_pixel = (FMapWin_tile_to_pixel)0x462F00;
FMapWin_gen_terrain_poly MapWin_gen_terrain_poly = (FMapWin_gen_terrain_poly)0x4632D0;
FMapWin_compute_clip MapWin_compute_clip = (FMapWin_compute_clip)0x468CD0;
FMapWin_gen_radius MapWin_gen_radius = (FMapWin_gen_radius)0x469190;
FMapWin_gen_map MapWin_gen_map = (FMapWin_gen_map)0x469CA0;
FMapWin_draw_radius MapWin_draw_radius = (FMapWin_draw_radius)0x46A2A0;
FMapWin_draw_tile MapWin_draw_tile = (FMapWin_draw_tile)0x46A4A0;
FMapWin_draw_map MapWin_draw_map = (FMapWin_draw_map)0x46A550;
FMapWin_draw_cursor MapWin_draw_cursor = (FMapWin_draw_cursor)0x46AD60;
FMapWin_set_center MapWin_set_center = (FMapWin_set_center)0x46B1F0;
FMapWin_focus MapWin_focus = (FMapWin_focus)0x46B310;
fp_none MapWin_main_caption = (fp_none)0x46FB10;
FMapWin_clear_alt MapWin_clear_alt = (FMapWin_clear_alt)0x46FB90;
FMapWin_clear_terrain MapWin_clear_terrain = (FMapWin_clear_terrain)0x46FD90;
FMapWin_get_relative_alt MapWin_get_relative_alt = (FMapWin_get_relative_alt)0x46FE00;
FMapWin_get_alt MapWin_get_alt = (FMapWin_get_alt)0x46FE70;
fp_none MapWin_compute_lighting_table = (fp_none)0x470420;
FMapWin_get_brighting MapWin_get_brighting = (FMapWin_get_brighting)0x470550;
FMapWin_get_point_light MapWin_get_point_light = (FMapWin_get_point_light)0x470790;
FMapWin_init2 MapWin_init2 = (FMapWin_init2)0x470920;
FMapWin_init MapWin_init = (FMapWin_init)0x470A90;
FMapWin MapWin_init_dummy = (FMapWin)0x470ED0;
FMapWin MapWin_close = (FMapWin)0x470F70;

FGraphicWin_GraphicWin GraphicWin_GraphicWin = (FGraphicWin_GraphicWin)0x5D4CF0;
FGraphicWin_dtor GraphicWin_dtor = (FGraphicWin_dtor)0x5D4DD0;
FGraphicWin_close GraphicWin_close = (FGraphicWin_close)0x5D4E40;
FGraphicWin_init GraphicWin_init = (FGraphicWin_init)0x5D4EF0;
FGraphicWin_init2 GraphicWin_init2 = (FGraphicWin_init2)0x5D50A0;
FGraphicWin_fill GraphicWin_fill = (FGraphicWin_fill)0x5D5250;
FGraphicWin_fill2 GraphicWin_fill2 = (FGraphicWin_fill2)0x5D5350;
FGraphicWin_fill3 GraphicWin_fill3 = (FGraphicWin_fill3)0x5D5440;
FGraphicWin_load_pcx GraphicWin_load_pcx = (FGraphicWin_load_pcx)0x5D5500;
FGraphicWin_resize GraphicWin_resize = (FGraphicWin_resize)0x5D5540;
FGraphicWin_update3 GraphicWin_update3 = (FGraphicWin_update3)0x5D55D0;
FGraphicWin_update2 GraphicWin_update2 = (FGraphicWin_update2)0x5D5630;
FGraphicWin_update GraphicWin_update = (FGraphicWin_update)0x5D56B0;
FGraphicWin_soft_update3 GraphicWin_soft_update3 = (FGraphicWin_soft_update3)0x5D5720;
FGraphicWin_soft_update2 GraphicWin_soft_update2 = (FGraphicWin_soft_update2)0x5D5890;
FGraphicWin_soft_update GraphicWin_soft_update = (FGraphicWin_soft_update)0x5D5930;
FGraphicWin_redraw GraphicWin_redraw = (FGraphicWin_redraw)0x5D5A70;
FGraphicWin_delete GraphicWin_delete = (FGraphicWin_delete)0x5D7160;

FGenWin BattleWin_init = (FGenWin)0x4219E0;
FGenWin BattleWin_pulse_timer = (FGenWin)0x421B20;
FGenWin BattleWin_stop_timer = (FGenWin)0x421B40;
FBattleWin_battle_report BattleWin_battle_report = (FBattleWin_battle_report)0x421B50;
FGenWin BattleWin_clear = (FGenWin)0x422C50;
FGenWin BattleWin_BattleWin = (FGenWin)0x422EE0;

FStatusWin_set_title StatusWin_set_title = (FStatusWin_set_title)0x4B4A20;
FStatusWin_draw_active StatusWin_draw_active = (FStatusWin_draw_active)0x4B4CF0;
FGenWin StatusWin_reset_active = (FGenWin)0x4B6530;
FStatusWin_draw_status StatusWin_draw_status = (FStatusWin_draw_status)0x4B6570;
FStatusWin_draw StatusWin_draw = (FStatusWin_draw)0x4B8830;
FGenWin StatusWin_on_redraw = (FGenWin)0x4B8890;
FGenWin StatusWin_reset = (FGenWin)0x4B8970;
FStatusWin_on_left_double_click StatusWin_on_left_double_click = (FStatusWin_on_left_double_click)0x4B8990;
FGenWin StatusWin_arrow_left = (FGenWin)0x4B89C0;
FGenWin StatusWin_arrow_right = (FGenWin)0x4B8BD0;
FStatusWin_on_left_click StatusWin_on_left_click = (FStatusWin_on_left_click)0x4B8E40;
FStatusWin_on_right_click StatusWin_on_right_click = (FStatusWin_on_right_click)0x4B9010;
FGenWin StatusWin_redraw = (FGenWin)0x4B9EA0;
FStatusWin_set_loc StatusWin_set_loc = (FStatusWin_set_loc)0x4B9F90;
FGenWin StatusWin_init = (FGenWin)0x4B9FC0;

fp_1int tut_check = (fp_1int)0x4BA5F0;
fp_1int tut_check2 = (fp_1int)0x4BA650;
FGenWin TutWin_TutWin = (FGenWin)0x4BA6B0;
FGenWin TutWin_clear = (FGenWin)0x4BA720;
FTutWin_do_base TutWin_do_base = (FTutWin_do_base)0x4BA870;
FTutWin_iface_rect TutWin_iface_rect = (FTutWin_iface_rect)0x4BC5A0;
FTutWin_base_rect TutWin_base_rect = (FTutWin_base_rect)0x4BC5F0;
FTutWin_soc_rect TutWin_soc_rect = (FTutWin_soc_rect)0x4BC640;
FTutWin_des_rect TutWin_des_rect = (FTutWin_des_rect)0x4BC690;
FGenWin TutWin_tour = (FGenWin)0x4BC6E0;
FGenWin TutWin_reset = (FGenWin)0x4BDDE0;
FGenWin TutWin_draw_arrow = (FGenWin)0x4BDEA0;
FTutWin_tut_win TutWin_tut_win = (FTutWin_tut_win)0x4BDFE0;
FTutWin_tut_map TutWin_tut_map = (FTutWin_tut_map)0x4BE650;
FTutWin_delete TutWin_delete = (FTutWin_delete)0x4BEA20;

FBuffer_Buffer Buffer_Buffer = (FBuffer_Buffer)0x5D7210;
FBuffer_Buffer Buffer_dtor = (FBuffer_Buffer)0x5D7410;
FBuffer_Buffer Buffer_close = (FBuffer_Buffer)0x5D7470;
FBuffer_resize Buffer_resize = (FBuffer_resize)0x5D79C0;
FBuffer_load_pcx Buffer_load_pcx = (FBuffer_load_pcx)0x5D7DE0;
FBuffer_set_clip Buffer_set_clip = (FBuffer_set_clip)0x5D8000;
FBuffer_set_clip_ Buffer_set_clip_ = (FBuffer_set_clip_)0x5D8200;
FBuffer_fill Buffer_fill = (FBuffer_fill)0x5D8240;
FBuffer_draw2 Buffer_draw2 = (FBuffer_draw2)0x5D8370;
FBuffer_draw Buffer_draw = (FBuffer_draw)0x5D84C0;
FBuffer_draw_mono Buffer_draw_mono = (FBuffer_draw_mono)0x5D8930;
FBuffer_draw_0 Buffer_draw_0 = (FBuffer_draw_0)0x5D8EE0;
FBuffer_draw_multi_table_dest Buffer_draw_multi_table_dest = (FBuffer_draw_multi_table_dest)0x5D94B0;
FBuffer_copy4 Buffer_copy4 = (FBuffer_copy4)0x5D95B0;
FBuffer_copy3 Buffer_copy3 = (FBuffer_copy3)0x5D95E0;
FBuffer_copy2 Buffer_copy2 = (FBuffer_copy2)0x5D9610;
FBuffer_set_font Buffer_set_font = (FBuffer_set_font)0x5DAC70;
FBuffer_set_text_color Buffer_set_text_color = (FBuffer_set_text_color)0x5DACB0;
FBuffer_set_text_color2 Buffer_set_text_color2 = (FBuffer_set_text_color2)0x5DACE0;
FBuffer_set_text_color3 Buffer_set_text_color3 = (FBuffer_set_text_color3)0x5DAD10;
FBuffer_set_text_color_hyper Buffer_set_text_color_hyper = (FBuffer_set_text_color_hyper)0x5DAD40;
FBuffer_write_strings_height Buffer_write_strings_height = (FBuffer_write_strings_height)0x5DAD70;
FBuffer_write_strings Buffer_write_strings = (FBuffer_write_strings)0x5DB040;
FBuffer_write_l Buffer_write_l = (FBuffer_write_l)0x5DCEA0;
FBuffer_write_l2 Buffer_write_l2 = (FBuffer_write_l2)0x5DCF40;
FBuffer_write_cent_l Buffer_write_cent_l = (FBuffer_write_cent_l)0x5DD020;
FBuffer_write_cent_l2 Buffer_write_cent_l2 = (FBuffer_write_cent_l2)0x5DD0E0;
FBuffer_write_cent_l3 Buffer_write_cent_l3 = (FBuffer_write_cent_l3)0x5DD130;
FBuffer_write_cent_l4 Buffer_write_cent_l4 = (FBuffer_write_cent_l4)0x5DD250;
FBuffer_write_right_l Buffer_write_right_l = (FBuffer_write_right_l)0x5DD300;
FBuffer_write_right_l2 Buffer_write_right_l2 = (FBuffer_write_right_l2)0x5DD3B0;
FBuffer_write_right_l3 Buffer_write_right_l3 = (FBuffer_write_right_l3)0x5DD450;
FBuffer_wrap Buffer_wrap = (FBuffer_wrap)0x5DD530;
FBuffer_wrap2 Buffer_wrap2 = (FBuffer_wrap2)0x5DD730;
FBuffer_wrap_cent Buffer_wrap_cent = (FBuffer_wrap_cent)0x5DD920;
FBuffer_wrap_cent3 Buffer_wrap_cent3 = (FBuffer_wrap_cent3)0x5DDAB0;
FBuffer_change_color Buffer_change_color = (FBuffer_change_color)0x5DE580;
FBuffer_sync_to_palette Buffer_sync_to_palette = (FBuffer_sync_to_palette)0x5DE8F0;
FBuffer_Buffer Buffer_clear_links = (FBuffer_Buffer)0x5DEF90;
FBuffer_write_pcx Buffer_write_pcx = (FBuffer_write_pcx)0x5DF590;
FBuffer_fill2 Buffer_fill2 = (FBuffer_fill2)0x5DFB50;
FBuffer_fill3 Buffer_fill3 = (FBuffer_fill3)0x5DFCD0;
FBuffer_copy Buffer_copy = (FBuffer_copy)0x5DFF00;
FBuffer_line Buffer_line = (FBuffer_line)0x5E09D0;
FBuffer_line_0 Buffer_line_0 = (FBuffer_line_0)0x5E15F0;
FBuffer_hline Buffer_hline = (FBuffer_hline)0x5E1A80;
FBuffer_vline Buffer_vline = (FBuffer_vline)0x5E1BF0;
FBuffer_dotted_vline Buffer_dotted_vline = (FBuffer_dotted_vline)0x5E1EF0;
FBuffer_get_pixel Buffer_get_pixel = (FBuffer_get_pixel)0x5E2210;
FBuffer_get_pcx_dimensions Buffer_get_pcx_dimensions = (FBuffer_get_pcx_dimensions)0x5E2480;
FBuffer_load_pcx2 Buffer_load_pcx2 = (FBuffer_load_pcx2)0x5E2690;
FBuffer_copy_mask Buffer_copy_mask = (FBuffer_copy_mask)0x5E2B00;
FBuffer_box_sprite Buffer_box_sprite = (FBuffer_box_sprite)0x5E2DD3;
FBuffer_box Buffer_box = (FBuffer_box)0x5E3203;

FFX_init FX_init = (FFX_init)0x445CD0;
FFX_play2 FX_play2 = (FFX_play2)0x446960;
FFX_play FX_play = (FFX_play)0x446A00;
FFX_play FX_stop = (FFX_play)0x446A90;
FFX_play FX_fade = (FFX_play)0x446AD0;
FFX_play FX_engine_pitch = (FFX_play)0x446B10;

FLock Lock_clear = (FLock)0x5900D0;
FLock_unlock Lock_unlock = (FLock_unlock)0x590170;
FLock Lock_check_global = (FLock)0x5901D0;
FLock_check_global_2 Lock_check_global_2 = (FLock_check_global_2)0x590240;
FLock_global_lock Lock_global_lock = (FLock_global_lock)0x5902C0;
FLock_lock Lock_lock = (FLock_lock)0x590300;
FLock_add_lock Lock_add_lock = (FLock_add_lock)0x590470;
FLock Lock_any_locks = (FLock)0x5904A0;

FTime Time_Time = (FTime)0x6161D0;
FTime Time_dtor = (FTime)0x616200;
FTime_init Time_init = (FTime_init)0x616260;
FTime_init2 Time_init2 = (FTime_init2)0x6162D0;
FTime_start Time_start = (FTime_start)0x616350;
FTime_start2 Time_start2 = (FTime_start2)0x616410;
FTime_pulse Time_pulse = (FTime_pulse)0x6164D0;
FTime_pulse2 Time_pulse2 = (FTime_pulse2)0x616590;
FTime Time_start3 = (FTime)0x616650;
FTime Time_pulse3 = (FTime)0x6166C0;
FTime Time_stop = (FTime)0x616730;
FTime Time_close = (FTime)0x616780;
fp_4int Time_TimerFunc1 = (fp_4int)0x6167E0;
fp_5int Time_TimerFunc2 = (fp_5int)0x616820;
FTime Time_set_modal = (FTime)0x616860;
FTime Time_release_modal = (FTime)0x616870;
fp_none Time_init_class = (fp_none)0x616880;
fp_none Time_close_class = (fp_none)0x616890;

FFontQueue_get_zoom FontQueue_get_zoom = (FFontQueue_get_zoom)0x5592D0;
FFont_Font Font_Font = (FFont_Font)0x618EA0;
FFont_Font Font_dtor = (FFont_Font)0x618EE0;
FFont_init2 Font_init2 = (FFont_init2)0x618F40;
FFont_init Font_init = (FFont_init)0x6190D0;
FFont_Font Font_close = (FFont_Font)0x619230;
FFont_width Font_width = (FFont_width)0x619280;
FFont_width2 Font_width2 = (FFont_width2)0x6192F0;
FFont_find_line_break_l Font_find_line_break_l = (FFont_find_line_break_l)0x619370;
FFont_init_font_class Font_init_font_class = (FFont_init_font_class)0x6195B0;
FFont_close_font_class Font_close_font_class = (FFont_close_font_class)0x619610;

FPath_init Path_init = (FPath_init)0x59A220;
FPath_shutdown Path_shutdown = (FPath_shutdown)0x59A2D0;
FPath_zoc_path Path_zoc_path = (FPath_zoc_path)0x59A370;
FPath_find Path_find = (FPath_find)0x59A530;
FPath_move Path_move = (FPath_move)0x59BC10;
fp_none Path_make_abstract = (fp_none)0x59C200;
FPath_territory Path_territory = (FPath_territory)0x59C3C0;
FPath_continent Path_continent = (FPath_continent)0x59C520;
FPath_continents Path_continents = (FPath_continents)0x59C790;
FPath_sensors Path_sensors = (FPath_sensors)0x59CCA0;

FAlphaNet AlphaNet_AlphaNet = (FAlphaNet)0x4E2490;
FAlphaNet AlphaNet_close = (FAlphaNet)0x4E25B0;
FAlphaNet_pid_2_idx AlphaNet_pid_2_idx = (FAlphaNet_pid_2_idx)0x4E25E0;
FAlphaNet_pid_2_who AlphaNet_pid_2_who = (FAlphaNet_pid_2_who)0x4E2610;
FAlphaNet_who_2_pid AlphaNet_who_2_pid = (FAlphaNet_who_2_pid)0x4E2660;
FAlphaNet_who_2_idx AlphaNet_who_2_idx = (FAlphaNet_who_2_idx)0x4E26B0;
FAlphaNet_pick_service AlphaNet_pick_service = (FAlphaNet_pick_service)0x4E26E0;
fp_none AlphaNet_do_create = (fp_none)0x4E2A30;
FAlphaNet AlphaNet_do_join = (FAlphaNet)0x4E2E50;
FAlphaNet_setup AlphaNet_setup = (FAlphaNet_setup)0x4E31E0;
FAlphaNet_do_join_dialog_and_connect AlphaNet_do_join_dialog_and_connect = (FAlphaNet_do_join_dialog_and_connect)0x62E420;
FAlphaNet_do_create_dialog_and_connect AlphaNet_do_create_dialog_and_connect = (FAlphaNet_do_create_dialog_and_connect)0x62EAA0;

FNetDaemon NetDaemon_cleanup = (FNetDaemon)0x51DD00;
FNetDaemon_init NetDaemon_init = (FNetDaemon_init)0x52DF30;
FNetDaemon NetDaemon_hang_up = (FNetDaemon)0x52E050;
FNetDaemon NetDaemon_send_game = (FNetDaemon)0x52E900;
FNetDaemon NetDaemon_send_files = (FNetDaemon)0x52ED40;
FNetDaemon NetDaemon_send_rules = (FNetDaemon)0x52F520;
FNetDaemon_game_checksum NetDaemon_game_checksum = (FNetDaemon_game_checksum)0x52F8E0;
FNetDaemon NetDaemon_receive = (FNetDaemon)0x530320;
FNetDaemon NetDaemon_net_tasks = (FNetDaemon)0x530360;
FNetDaemon_wait NetDaemon_wait = (FNetDaemon_wait)0x5303B0;
FNetDaemon_open_channel NetDaemon_open_channel = (FNetDaemon_open_channel)0x5304A0;
FNetDaemon NetDaemon_close_channel = (FNetDaemon)0x530600;
FNetDaemon_lock NetDaemon_lock = (FNetDaemon_lock)0x530630;
FNetDaemon_add_lock NetDaemon_add_lock = (FNetDaemon_add_lock)0x530920;
FNetDaemon NetDaemon_add_global = (FNetDaemon)0x530AA0;
FNetDaemon NetDaemon_unlock = (FNetDaemon)0x530D00;
FNetDaemon_lock_base NetDaemon_lock_base = (FNetDaemon_lock_base)0x530D50;
FNetDaemon_unlock_base NetDaemon_unlock_base = (FNetDaemon_unlock_base)0x530E50;
FNetDaemon_lock_veh NetDaemon_lock_veh = (FNetDaemon_lock_veh)0x531020;
FNetDaemon NetDaemon_unlock_veh = (FNetDaemon)0x5310F0;
FNetDaemon_automated_lock NetDaemon_automated_lock = (FNetDaemon_automated_lock)0x531150;
FNetDaemon_await_exec NetDaemon_await_exec = (FNetDaemon_await_exec)0x531300;
FNetDaemon NetDaemon_await_synch = (FNetDaemon)0x531480;
FNetDaemon_await_diplo NetDaemon_await_diplo = (FNetDaemon_await_diplo)0x5315C0;
FNetDaemon_maybe_lock NetDaemon_maybe_lock = (FNetDaemon_maybe_lock)0x531700;
FNetDaemon_order_veh NetDaemon_order_veh = (FNetDaemon_order_veh)0x531780;
FNetDaemon_veh_drop NetDaemon_veh_drop = (FNetDaemon_veh_drop)0x532140;
FNetDaemon_action NetDaemon_action = (FNetDaemon_action)0x532570;
FNetDaemon_send_message NetDaemon_send_message = (FNetDaemon_send_message)0x532940;
FNetDaemon_synch NetDaemon_synch = (FNetDaemon_synch)0x532E00;
FNetDaemon_fixup_message NetDaemon_fixup_message = (FNetDaemon_fixup_message)0x534330;
FNetDaemon_process_message NetDaemon_process_message = (FNetDaemon_process_message)0x534400;

FNet Net_Net = (FNet)0x62D6A0;
FNet_init Net_init = (FNet_init)0x62D8E0;
FNet_check_for_lobby Net_check_for_lobby = (FNet_check_for_lobby)0x62D9E0;
FNet_start_voice Net_start_voice_1 = (FNet_start_voice)0x62DF20;
FNet_start_voice Net_start_voice_2 = (FNet_start_voice)0x62DF70;
FNet Net_stop_voice = (FNet)0x62DFC0;
FNet Net_close = (FNet)0x62E010;
FNet_poll_services Net_poll_services = (FNet_poll_services)0x62E250;
FNet_join_service Net_join_service = (FNet_join_service)0x62E2A0;
FNet_join_session Net_join_session = (FNet_join_session)0x62E540;
FNet_send_group Net_send_group = (FNet_send_group)0x62EEA0;
FNet_send_packet_type Net_send_packet_type = (FNet_send_packet_type)0x62F8A0;
FNet_send Net_send = (FNet_send)0x630080;
FNet_get Net_get = (FNet_get)0x630A00;
FNet_get_player_name Net_get_player_name = (FNet_get_player_name)0x631A20;
FNet Net_process_voice = (FNet)0x631A60;
FNet Net_enable_join = (FNet)0x632070;
FNet Net_check_polling = (FNet)0x6320E0;
FNet_drop_player Net_drop_player = (FNet_drop_player)0x632350;
FNetFifo NetFifo_NetFifo = (FNetFifo)0x6339C0;
FNetFifo NetFifo_dtor = (FNetFifo)0x6339E0;
FNetFifo NetFifo_close = (FNetFifo)0x633A50;
FNetFifo_add NetFifo_add = (FNetFifo_add)0x633AB0;
FNetFifo_get NetFifo_get = (FNetFifo_get)0x633D90;

fp_1int wave_it                  = (fp_1int)0x4455F0;
fp_none ok_callback              = (fp_none)0x445650;
fp_1int load_music               = (fp_1int)0x4457E0;
fp_1int ambience                 = (fp_1int)0x446B40;
fp_1int ambience_veh             = (fp_1int)0x446D10;
fp_1int hall_of_fame             = (fp_1int)0x44AE50;
fp_2int tech_heck                = (fp_2int)0x44B380;
fp_4int help_tech_info           = (fp_4int)0x44B9E0;
fp_3int help_tech_info2          = (fp_3int)0x44C7F0;
fp_1int help_project             = (fp_1int)0x44C9E0;
fp_none help_any                 = (fp_none)0x44CB30;
fp_2int help_topic               = (fp_2int)0x44CB60;
fp_3int help_create_link         = (fp_3int)0x44CB80;

fp_none load_voxels              = (fp_none)0x451030;
fp_none load_palette             = (fp_none)0x451A10;
fp_none load_terrain             = (fp_none)0x451C50;
fp_1int load_faction_art         = (fp_1int)0x453710;
fp_none load_box_sprites         = (fp_none)0x453A70;
fp_none load_flags               = (fp_none)0x453F70;
fp_none load_vehicles            = (fp_none)0x454270;
fp_none load_icons               = (fp_none)0x4547E0;
fp_none load_misc                = (fp_none)0x454D10;
fp_none load_cursors             = (fp_none)0x454FC0;
fp_none load_cycling             = (fp_none)0x455400;
fp_none load_interface           = (fp_none)0x455610;
fp_none load_deswin_sprites      = (fp_none)0x455E50;
fp_none load_fixed_sprites       = (fp_none)0x455E80;
fp_none load_sprites             = (fp_none)0x455EB0;

fp_1int monument                 = (fp_1int)0x476A50;
fp_none clear_monument           = (fp_none)0x476B30;
fp_2int mon_colony_founded       = (fp_2int)0x476B70;
fp_2int mon_tech_discovered      = (fp_2int)0x476C90;
fp_1int mon_secrets_of_tech      = (fp_1int)0x476DA0;
fp_1int mon_prototype_built      = (fp_1int)0x476EE0;
fp_2int mon_facility_built       = (fp_2int)0x476FE0;
fp_2int mon_secret_project       = (fp_2int)0x477100;
fp_2int mon_enemy_destroyed      = (fp_2int)0x477210;
fp_2int mon_conquer_base         = (fp_2int)0x477320;
fp_1int mon_naval_unit_built     = (fp_1int)0x477440;
fp_1int mon_air_unit_built       = (fp_1int)0x477540;
fp_1int mon_native_life_bred     = (fp_1int)0x477640;
fp_1int mon_first_in_space       = (fp_1int)0x477740;
fp_1int mon_built_preserve       = (fp_1int)0x477840;
fp_2int mon_winning_unify        = (fp_2int)0x477940;
fp_2int mon_winning_trans        = (fp_2int)0x4779D0;
fp_2int mon_killed_faction       = (fp_2int)0x477A60;
fp_3int say_morale2              = (fp_3int)0x4B3FD0;
fp_2int say_morale               = (fp_2int)0x4B43C0;
fp_2int say_orders               = (fp_2int)0x4B43E0;
fp_1int say_orders2              = (fp_1int)0x4B4970;

fp_3int terraform_cost           = (fp_3int)0x4C9420;
fp_2int action_build             = (fp_2int)0x4C96E0;
fp_2int contribution             = (fp_2int)0x4C9A50;
fp_3int action_terraform         = (fp_3int)0x4C9B00;
fp_1int action_staple            = (fp_1int)0x4CA7F0;
Fact_destroy action_destroy = (Fact_destroy)0x4CAA50;
fp_1int action_go_to             = (fp_1int)0x4CB310;
fp_1int action_road_to           = (fp_1int)0x4CB580;
fp_2int action_home              = (fp_2int)0x4CBAA0;
Fact_airdrop action_airdrop = (Fact_airdrop)0x4CC360;
fp_3int action_arty              = (fp_3int)0x4CD090;
fp_1int action_destruct          = (fp_1int)0x4CD2F0;
fp_2int action_oblit             = (fp_2int)0x4CD4E0;
fp_3int valid_patrol             = (fp_3int)0x4CD6A0;
fp_3int action_patrol            = (fp_3int)0x4CDA30;
fp_5int shoot_it                 = (fp_5int)0x4CDAF0;
fp_3int action_tectonic          = (fp_3int)0x4CE210;
fp_3int action_fungal            = (fp_3int)0x4CE790;
fp_2int action_give              = (fp_2int)0x4CEDE0;
Fact_gate action_gate          = (Fact_gate)0x4CF380;
fp_4int action_sat_attack        = (fp_4int)0x4CF480;
fp_1int action                   = (fp_1int)0x4CF740;

fp_1int set_base                 = (fp_1int)0x4E39D0;
fp_2int say_base                 = (fp_2int)0x4E3A00;
Fbase_at base_at                = (Fbase_at)0x4E3A50;
fp_2int base_find                = (fp_2int)0x4E3B80;
fp_3int base_find2               = (fp_3int)0x4E3C60;
fp_6int base_find3               = (fp_6int)0x4E3D50;
fp_5int whose_territory          = (fp_5int)0x4E3EF0;
fp_3int base_territory           = (fp_3int)0x4E3FA0;
fp_none best_specialist          = (fp_none)0x4E4020;
Fname_base name_base          = (Fname_base)0x4E4090;
fp_1int base_mark                = (fp_1int)0x4E4350;
fp_3int cost_factor              = (fp_3int)0x4E4430;
fp_2int base_making              = (fp_2int)0x4E4700;
fp_1int base_lose_minerals       = (fp_1int)0x4E4810;
fp_3int set_fac                  = (fp_3int)0x4E48B0;
fp_3int is_coast                 = (fp_3int)0x4E49D0;
fp_1int base_first               = (fp_1int)0x4E4AA0;
fp_3int base_init                = (fp_3int)0x4E4B80;
fp_1int base_kill                = (fp_1int)0x4E5250;
fp_2int base_change              = (fp_2int)0x4E5A60;
fp_2int base_reset               = (fp_2int)0x4E5FE0;
fp_3int bases_reset              = (fp_3int)0x4E6300;
fp_3int morale_mod               = (fp_3int)0x4E6400;
fp_2int breed_mod                = (fp_2int)0x4E65C0;
fp_2int worm_mod                 = (fp_2int)0x4E6740;
fp_none farm_compute             = (fp_none)0x4E68B0;
fp_5int crop_yield               = (fp_5int)0x4E6E50;
fp_5int mine_yield               = (fp_5int)0x4E7310;
fp_5int energy_yield             = (fp_5int)0x4E7750;
fp_5int resource_yield           = (fp_5int)0x4E7DC0;
fp_none base_yield               = (fp_none)0x4E80B0;
fp_none base_support             = (fp_none)0x4E9550;
fp_none base_nutrient            = (fp_none)0x4E9B70;
fp_none base_minerals            = (fp_none)0x4E9CB0;
fp_1int black_market             = (fp_1int)0x4EA1F0;
fp_3int psych_check              = (fp_3int)0x4EA4A0;
fp_none base_psych               = (fp_none)0x4EA540;
fp_2int base_rank                = (fp_2int)0x4EB490;
fp_none base_energy              = (fp_none)0x4EB560;
fp_1int base_compute             = (fp_1int)0x4EC3B0;
fp_1int base_connect             = (fp_1int)0x4EC3F0;
fp_1int base_terraform           = (fp_1int)0x4ECBF0;
fp_1int pop_goal                 = (fp_1int)0x4EF090;
fp_none base_growth              = (fp_none)0x4EF1C0;
fp_3int do_upgrade               = (fp_3int)0x4EFB50;
fp_3int upgrade_cost             = (fp_3int)0x4EFD50;
fp_4int upgrade_prototype        = (fp_4int)0x4EFE80;
fp_2int upgrade_prototypes       = (fp_2int)0x4F0460;
fp_1int upgrade_any_prototypes   = (fp_1int)0x4F0650;
fp_1int base_queue               = (fp_1int)0x4F06E0;
fp_none base_production          = (fp_none)0x4F07E0;
fp_none base_hurry               = (fp_none)0x4F3FE0;
fp_none base_check_support       = (fp_none)0x4F4830;
fp_none base_energy_costs        = (fp_none)0x4F4DC0;
fp_none base_research            = (fp_none)0x4F4E80;
fp_none drone_riot               = (fp_none)0x4F4FB0;
fp_none base_drones              = (fp_none)0x4F5CE0;
fp_none base_doctors             = (fp_none)0x4F5F30;
fp_2int fac_maint                = (fp_2int)0x4F6510;
fp_none base_maint               = (fp_none)0x4F65F0;
fp_none base_ecology             = (fp_none)0x4F67F0;
fp_1int base_upkeep              = (fp_1int)0x4F79C0;
fp_1int make_base_unique         = (fp_1int)0x4F7FE0;
fp_2int x_dist                   = (fp_2int)0x4F8090;
fp_2int has_project              = (fp_2int)0x4F80D0;
fp_6int base_claimed             = (fp_6int)0x4F8110;
fp_4int base_build               = (fp_4int)0x4F81A0;

fp_1int drop_range               = (fp_1int)0x500320;
fp_1int planet_buster2           = (fp_1int)0x5004F0;
fp_1int planet_buster            = (fp_1int)0x500520;
fp_4int shoot                    = (fp_4int)0x500560;
fp_3int planet_busting           = (fp_3int)0x500B60;
fp_5int defense_value            = (fp_5int)0x5010C0;
fp_2int morale_alien             = (fp_2int)0x501350;
fp_4int psi_factor               = (fp_4int)0x501500;
fp_5int get_basic_offense        = (fp_5int)0x5015B0;
fp_4int get_basic_defense        = (fp_4int)0x501940;
Fbattle_compute battle_compute = (Fbattle_compute)0x501DA0;
fp_3int best_defender            = (fp_3int)0x5044D0;
fp_3int boom                     = (fp_3int)0x504AA0;
fp_none sub_505D40               = (fp_none)0x505D40;
fp_none sub_505D60               = (fp_none)0x505D60;
Fbattle_kill battle_kill       = (Fbattle_kill)0x505D80;
Fbattle_kill battle_kill_stack = (Fbattle_kill)0x506130;
fp_1int promote                  = (fp_1int)0x5062B0;
fp_1int invasions                = (fp_1int)0x506490;
fp_4int interceptor              = (fp_4int)0x506650;
Fbattle_fight_1 battle_fight_1 = (Fbattle_fight_1)0x506A60;
Fbattle_fight_2 battle_fight_2 = (Fbattle_fight_2)0x506AF0;
fp_1int say_num                  = (fp_1int)0x50B8A0;
fp_4int POP3_                    = (fp_4int)0x50B8D0;
fp_1int sub_50B8F0               = (fp_1int)0x50B8F0;
fp_1int sub_50B910               = (fp_1int)0x50B910;
fp_1int parse_set                = (fp_1int)0x50B930;
fp_3int sub_50B970               = (fp_3int)0x50B970;
fp_1int sub_50B9A0               = (fp_1int)0x50B9A0;
fp_2int sub_50B9C0               = (fp_2int)0x50B9C0;
FNetMsg_pop2 NetMsg_pop2    = (FNetMsg_pop2)0x50B9E0;
fp_3int bitmask                  = (fp_3int)0x50BA00;
fp_1int bit_count                = (fp_1int)0x50BA30;
fp_2int intervention             = (fp_2int)0x50BA50;
fp_3int double_cross             = (fp_3int)0x50BCC0;
fp_2int act_of_aggression        = (fp_2int)0x50C2E0;
fp_3int steal_tech               = (fp_3int)0x50C340;
fp_1int steal_energy             = (fp_1int)0x50C4B0;
fp_3int capture_base             = (fp_3int)0x50C510;
fp_1int clock_wait               = (fp_1int)0x50DD90;
fp_2int sea_coast                = (fp_2int)0x50DDC0;
fp_1int sea_coasts               = (fp_1int)0x50DE00;
fp_2int base_on_sea              = (fp_2int)0x50DE50;
fp_1int base_coast               = (fp_1int)0x50DF30;
fp_2int port_to_coast            = (fp_2int)0x50E030;
fp_2int port_to_port             = (fp_2int)0x50E160;
fp_1int transport_base           = (fp_1int)0x50E310;
fp_1int naval_base               = (fp_1int)0x50E3C0;
fp_2int convoy                   = (fp_2int)0x50E5C0;
fp_1int mandate_color            = (fp_1int)0x50E820;

fp_1int random_events            = (fp_1int)0x51F2E0;
fp_none sub_5204E9               = (fp_none)0x5204E9;
fp_none alien_fauna              = (fp_none)0x522180;
fp_none do_fungal_towers         = (fp_none)0x522F00;
fp_4int interlude                = (fp_4int)0x5230E0;
fp_none set_time_controls        = (fp_none)0x523C60;
fp_none reset_territory          = (fp_none)0x523DD0;
fp_1int sub_524340               = (fp_1int)0x524340;
fp_2int generators               = (fp_2int)0x5247B0;
fp_1int end_of_game              = (fp_1int)0x524870;
fp_none turn_upkeep              = (fp_none)0x5258C0;
fp_1int repair_phase             = (fp_1int)0x526030;
fp_1int allocate_energy          = (fp_1int)0x5267B0;
fp_1int production_phase         = (fp_1int)0x526E70;
fp_1int faction_upkeep           = (fp_1int)0x527290;
fp_none control_turn             = (fp_none)0x5275B0;
fp_1int net_upkeep_phase         = (fp_1int)0x528EA0;
fp_none net_upkeep               = (fp_none)0x5290A0;
fp_none mash_planes              = (fp_none)0x529C00;
fp_none net_end_of_turn          = (fp_none)0x529F30;
fp_none net_control_turn         = (fp_none)0x52A2E0;
fp_none control_game             = (fp_none)0x52AA30;
fp_1int council_votes            = (fp_1int)0x52AD30;
fp_1int eligible                 = (fp_1int)0x52AE20;
fp_3int wants_prop               = (fp_3int)0x52AEB0;
fp_3int council_get_vote         = (fp_3int)0x52BE60;
fp_2int council_action           = (fp_2int)0x52BF60;
fp_2int can_call_council         = (fp_2int)0x52C670;
fp_1int call_council             = (fp_1int)0x52C880;
fp_none rebuild_vehicle_bits     = (fp_none)0x532A90;
fp_none rebuild_base_bits        = (fp_none)0x532B70;

fp_5int danger                   = (fp_5int)0x538F30;
fp_1int checksum_file            = (fp_1int)0x538FE0;
fp_3int checksum                 = (fp_3int)0x539090;
fp_1int checksum_password        = (fp_1int)0x5390C0;
fp_none auto_contact             = (fp_none)0x539160;
fp_4int net_treaty_on            = (fp_4int)0x5391C0;
fp_4int net_treaty_off           = (fp_4int)0x539230;
fp_5int net_set_treaty           = (fp_5int)0x5392A0;
fp_4int net_agenda_off           = (fp_4int)0x539380;
fp_5int net_set_agenda           = (fp_5int)0x5393F0;
Fnet_energy net_energy       = (Fnet_energy)0x539460;
Fnet_loan net_loan             = (Fnet_loan)0x539510;
fp_3int net_maps                 = (fp_3int)0x539580;
Fnet_tech net_tech             = (Fnet_tech)0x5395F0;
fp_3int net_pact_ends            = (fp_3int)0x539660;
fp_3int net_cede_base            = (fp_3int)0x539740;
fp_4int net_double_cross         = (fp_4int)0x5397B0;
fp_1int diplo_lock               = (fp_1int)0x539820;
fp_none diplo_unlock             = (fp_none)0x5398C0;
fp_none sub_5398E0               = (fp_none)0x5398E0;
fp_none sub_539920               = (fp_none)0x539920;
fp_2int diplomacy_caption        = (fp_2int)0x5399A0;
fp_2int great_beelzebub          = (fp_2int)0x539B70;
fp_2int great_satan              = (fp_2int)0x539C00;
fp_2int aah_ooga                 = (fp_2int)0x539D40;
fp_none climactic_battle         = (fp_none)0x539E40;
fp_1int at_climax                = (fp_1int)0x539EF0;
fp_3int cause_friction           = (fp_3int)0x53A030;
fp_1int get_mood                 = (fp_1int)0x53A090;
fp_2int reputation               = (fp_2int)0x53A100;
fp_2int get_patience             = (fp_2int)0x53A150;
fp_1int energy_value             = (fp_1int)0x53A1C0;
fp_2int mention_prototypes       = (fp_2int)0x53A230;
fp_2int scan_prototypes          = (fp_2int)0x53A4A0;
fp_4int contiguous               = (fp_4int)0x53A780;
fp_3int diplomacy_check          = (fp_3int)0x53A980;
fp_2int pact_withdraw            = (fp_2int)0x53C370;
fp_2int pact_ends                = (fp_2int)0x53C650;
fp_2int pact_of_brotherhood      = (fp_2int)0x53CAF0;
fp_2int make_treaty              = (fp_2int)0x53CE10;
fp_3int pledge_truce             = (fp_3int)0x53D160;
fp_2int introduce                = (fp_2int)0x53D360;
fp_2int wants_to_speak           = (fp_2int)0x53DCE0;
fp_2int diplomacy_ends           = (fp_2int)0x53E470;
fp_2int demands_withdrawal       = (fp_2int)0x53E4C0;
fp_2int renounce_pact            = (fp_2int)0x53E5C0;
fp_2int tech_analysis            = (fp_2int)0x53E800;
fp_4int buy_council_vote         = (fp_4int)0x53EB50;
fp_5int buy_tech                 = (fp_5int)0x5401A0;
fp_2int energy_trade             = (fp_2int)0x540630;
fp_5int tech_trade               = (fp_5int)0x541100;
fp_2int trade_maps               = (fp_2int)0x543A20;
fp_2int propose_pact             = (fp_2int)0x543BC0;
fp_2int propose_treaty           = (fp_2int)0x544E40;
fp_2int propose_attack           = (fp_2int)0x545E80;
fp_2int make_gift                = (fp_2int)0x547C10;
fp_2int dont_withdrawal          = (fp_2int)0x548DD0;
fp_2int do_withdrawal            = (fp_2int)0x548F80;
fp_2int demand_withdrawal        = (fp_2int)0x549270;
fp_2int threaten                 = (fp_2int)0x549930;
fp_2int suggest_plan             = (fp_2int)0x54ACC0;
fp_2int attack_from              = (fp_2int)0x54AFA0;
fp_1int sub_54B140               = (fp_1int)0x54B140;
fp_2int battle_plans             = (fp_2int)0x54B1C0;
fp_2int call_off_vendetta        = (fp_2int)0x54BEC0;
fp_2int diplomacy_menu           = (fp_2int)0x54C560;
fp_5int value_of_base            = (fp_5int)0x54CB50;
fp_2int give_a_base              = (fp_2int)0x54CF40;
fp_2int base_swap                = (fp_2int)0x54D410;
fp_2int proposal_menu            = (fp_2int)0x54DCF0;
fp_3int make_a_proposal          = (fp_3int)0x54F420;
fp_3int communicate              = (fp_3int)0x54FFD0;
fp_2int commlink_attempter       = (fp_2int)0x5589E0;
fp_1int commlink_attempt         = (fp_1int)0x558C60;

fp_1int pick_top_veh             = (fp_1int)0x5593E0;
fp_7int veh_draw                 = (fp_7int)0x5594F0;
fp_5int veh_scoot                = (fp_5int)0x55A150;
Fbase_draw base_draw          = (Fbase_draw)0x55AF20;
fp_3int treaty_off               = (fp_3int)0x55B760;
fp_3int agenda_off               = (fp_3int)0x55B820;
fp_3int treaty_on                = (fp_3int)0x55B870;
fp_3int agenda_on                = (fp_3int)0x55BA80;
fp_4int set_treaty               = (fp_4int)0x55BB30;
fp_4int set_agenda               = (fp_4int)0x55BBA0;
fp_1int spying                   = (fp_1int)0x55BC00;
fp_3int wants_to_attack          = (fp_3int)0x55BC80;
fp_2int comm_check               = (fp_2int)0x55C430;
fp_2int enemies_war              = (fp_2int)0x55C840;
fp_2int pact_unpact              = (fp_2int)0x55CCA0;
fp_2int enemies_unpact           = (fp_2int)0x55CE20;
fp_3int enemies_team_up          = (fp_3int)0x55D2A0;
fp_2int enemies_trade_tech       = (fp_2int)0x55D430;
fp_3int enemies_treaty           = (fp_3int)0x55D760;
fp_6int encounter                = (fp_6int)0x55E370;
fp_5int territory                = (fp_5int)0x55EB80;
fp_4int atrocity                 = (fp_4int)0x55EEE0;
fp_2int major_atrocity           = (fp_2int)0x55F450;
fp_3int break_treaty             = (fp_3int)0x55F770;
fp_1int enemy_diplomacy          = (fp_1int)0x55F930;
fp_4int go_to                    = (fp_4int)0x560AD0;
fp_1int garrison_check           = (fp_1int)0x560B30;
fp_1int defensive_check          = (fp_1int)0x560D30;
fp_2int guard_check              = (fp_2int)0x560D50;
fp_1int enemy_capabilities       = (fp_1int)0x560DD0;
fp_1int enemy_strategy           = (fp_1int)0x561080;
fp_4int set_course               = (fp_4int)0x564890;
fp_3int assemble_passengers      = (fp_3int)0x564B90;
fp_2int can_convoy               = (fp_2int)0x564D90;
fp_3int good_sensor              = (fp_3int)0x564EB0;
fp_5int can_terraform            = (fp_5int)0x565320;
fp_5int compute_odds             = (fp_5int)0x565F20;
fp_3int alien_base               = (fp_3int)0x5665D0;
fp_1int alien_move               = (fp_1int)0x566810;
fp_5int air_power                = (fp_5int)0x5678C0;
fp_1int enemy_planet_buster      = (fp_1int)0x56A8A0;
fp_3int get_there                = (fp_3int)0x56B320;
fp_5int coast_or_border          = (fp_5int)0x56B480;
fp_1int enemy_move               = (fp_1int)0x56B5B0;
fp_1int enemy_veh                = (fp_1int)0x579240;
fp_1int enemy_turn               = (fp_1int)0x579510;
fp_1int rnd                      = (fp_1int)0x579770;
fp_2int cursor_dist              = (fp_2int)0x579790;
fp_3int site_at                  = (fp_3int)0x5797D0;
fp_3int is_known                 = (fp_3int)0x579840;
fp_2int base_who                 = (fp_2int)0x5798A0;
fp_2int anything_at              = (fp_2int)0x5798E0;
fp_1int veh_top                  = (fp_1int)0x579920;
fp_1int veh_moves                = (fp_1int)0x579960;
fp_1int proto_power              = (fp_1int)0x5799A0;
fp_2int is_port                  = (fp_2int)0x579A00;
fp_6int add_goal                 = (fp_6int)0x579A30;
fp_5int add_site                 = (fp_5int)0x579B70;
fp_4int at_goal                  = (fp_4int)0x579CC0;
fp_4int at_site                  = (fp_4int)0x579D20;
fp_1int wipe_goals               = (fp_1int)0x579D80;
fp_1int clear_goals              = (fp_1int)0x579E00;
fp_5int del_site                 = (fp_5int)0x579E70;
fp_1int want_monolith            = (fp_1int)0x579F80;
fp_1int monolith                 = (fp_1int)0x57A050;
fp_1int goody_box                = (fp_1int)0x57A660;
fp_2int valid_tech_leap          = (fp_2int)0x57CE50;
fp_1int study_artifact           = (fp_1int)0x57CFA0;
Fheader_check header_check = (Fheader_check)0x57D1F0;
Fheader_write header_write = (Fheader_write)0x57D240;
fp_2int arm_strat                = (fp_2int)0x57D270;
fp_2int weap_strat               = (fp_2int)0x57D2E0;
fp_2int weap_val                 = (fp_2int)0x57D360;
fp_2int arm_val                  = (fp_2int)0x57D3F0;
fp_2int armor_val                = (fp_2int)0x57D480;
fp_3int transport_val            = (fp_3int)0x57D510;
fp_2int say_offense              = (fp_2int)0x57D560;
fp_2int say_defense              = (fp_2int)0x57D6D0;
Fsay_stats2 say_stats_3      = (Fsay_stats2)0x57D7D0;
Fsay_stats2 say_stats_2      = (Fsay_stats2)0x57D8E0;
fp_3int say_stats                = (fp_3int)0x57DAA0;
fp_1int clear_bunglist           = (fp_1int)0x57DF00;
fp_2int sub_57DF30               = (fp_2int)0x57DF30;
fp_6int is_bunged                = (fp_6int)0x57DFC0;
Fname_proto name_proto       = (Fname_proto)0x57E040;
fp_1int best_reactor             = (fp_1int)0x57EFA0;
fp_3int pick_chassis             = (fp_3int)0x57EFF0;
fp_3int weapon_budget            = (fp_3int)0x57F0B0;
fp_2int retire_proto             = (fp_2int)0x57F1D0;
fp_3int prune_protos             = (fp_3int)0x57F4B0;
Fpropose_proto propose_proto = (Fpropose_proto)0x580860;
fp_1int abil_index               = (fp_1int)0x581170;
fp_3int add_abil                 = (fp_3int)0x581190;
fp_1int consider_designs         = (fp_1int)0x581260;
fp_2int design_new_veh           = (fp_2int)0x583CB0;
fp_6int hq_list_draw             = (fp_6int)0x583CD0;
fp_2int design_workshop          = (fp_2int)0x583E30;
fp_4int abil_cond                = (fp_4int)0x584B50;

fp_1int tech_name                = (fp_1int)0x584D60;
fp_1int chas_name                = (fp_1int)0x584E40;
fp_1int weap_name                = (fp_1int)0x584F40;
fp_1int arm_name                 = (fp_1int)0x585030;
fp_none read_basic_rules         = (fp_none)0x585170;
fp_none read_tech                = (fp_none)0x585E30;
fp_1int read_faction2            = (fp_1int)0x586050;
fp_2int read_faction             = (fp_2int)0x586090;
fp_none read_factions            = (fp_none)0x586F30;
fp_none read_units               = (fp_none)0x587240;
fp_1int read_rules               = (fp_1int)0x5873C0;
fp_none sub_5882D0               = (fp_none)0x5882D0;
fp_2int find_font                = (fp_2int)0x5882F0;
fp_none scroll_normal            = (fp_none)0x588340;
fp_none scroll_small             = (fp_none)0x5883D0;
fp_none popups_normal            = (fp_none)0x588460;
fp_none popups_tutorial          = (fp_none)0x5888E0;
fp_none popups_medium            = (fp_none)0x5889C0;
fp_none config_popups            = (fp_none)0x588AA0;
fp_none alien_start              = (fp_none)0x588F90;
fp_1int planetfall               = (fp_1int)0x589180;
fp_1int time_controls_dialog     = (fp_1int)0x589330;
fp_1int thumb_routine            = (fp_1int)0x5898A0;
fp_1int change_opening           = (fp_1int)0x589A30;
fp_none close_opening            = (fp_none)0x589B20;
fp_1int config_game              = (fp_1int)0x589D30;
fp_2int custom_planet            = (fp_2int)0x58C2A0;
fp_1int size_of_planet           = (fp_1int)0x58CED0;
fp_1int map_menu                 = (fp_1int)0x58D6B0;
fp_1int multiplayer_init         = (fp_1int)0x58DB30;
fp_1int top_menu                 = (fp_1int)0x58E360;
fp_1int desktop_init             = (fp_1int)0x58EE60;
fp_none desktop_close            = (fp_none)0x58EFF0;
fp_none system_init              = (fp_none)0x58F040;
fp_none system_close             = (fp_none)0x58F250;
fp_2int game_init                = (fp_2int)0x58F2F0;
fp_none game_close               = (fp_none)0x58F430;
fp_2int game_reload              = (fp_2int)0x58F450;
fp_3int say_special              = (fp_3int)0x58F610;
fp_3int say_fac_special          = (fp_3int)0x58F700;
fp_2int get_phrase               = (fp_2int)0x58F810;
fp_2int get_noun_phrase          = (fp_2int)0x58F8B0;
fp_1int get_pact                 = (fp_1int)0x58F9D0;
fp_1int get_pacts                = (fp_1int)0x58FA20;
fp_2int get_pacts2               = (fp_2int)0x58FA70;
fp_2int get_pact_hood            = (fp_2int)0x58FB00;
fp_2int get_his_her              = (fp_2int)0x58FBC0;
fp_2int get_him_her              = (fp_2int)0x58FC50;
fp_2int get_he_she               = (fp_2int)0x58FCE0;

fp_none map_wipe                 = (fp_none)0x591040;
fp_3int alt_put_detail           = (fp_3int)0x591260;
fp_3int alt_set                  = (fp_3int)0x591290;
fp_2int alt_natural              = (fp_2int)0x5918A0;
fp_3int alt_set_both             = (fp_3int)0x5918F0;
fp_2int elev_at                  = (fp_2int)0x5919C0;
fp_3int climate_set              = (fp_3int)0x591A80;
fp_3int temp_set                 = (fp_3int)0x591AD0;
fp_3int owner_set                = (fp_3int)0x591B10;
fp_3int site_set                 = (fp_3int)0x591B50;
fp_3int region_set               = (fp_3int)0x591B90;
fp_3int rocky_set                = (fp_3int)0x591BC0;
fp_3int using_set                = (fp_3int)0x591C10;
fp_3int lock_set                 = (fp_3int)0x591C50;
fp_3int lock_map                 = (fp_3int)0x591C90;
fp_3int unlock_map               = (fp_3int)0x591CF0;
fp_3int bit_put                  = (fp_3int)0x591D30;
fp_4int bit_set                  = (fp_4int)0x591D60;
fp_4int bit2_set                 = (fp_4int)0x591DB0;
fp_3int code_set                 = (fp_3int)0x591E00;
fp_3int synch_bit                = (fp_3int)0x591E50;
fp_2int minerals_at              = (fp_2int)0x591F00;
fp_2int bonus_at                 = (fp_2int)0x592030;
fp_2int goody_at                 = (fp_2int)0x592140;
fp_6int say_loc                  = (fp_6int)0x592250;
fp_2int site_radius              = (fp_2int)0x592400;
fp_3int find_landmark            = (fp_3int)0x592550;
fp_3int new_landmark             = (fp_3int)0x592600;
fp_3int valid_landmark           = (fp_3int)0x592650;
fp_2int kill_landmark            = (fp_2int)0x5926F0;
fp_2int delete_landmark          = (fp_2int)0x5927D0;
fp_none fixup_landmarks          = (fp_none)0x592940;
fp_none set_dirty                = (fp_none)0x592A80;
fp_none sub_592AF0               = (fp_none)0x592AF0;
fp_4int message_veh              = (fp_4int)0x592E10;
fp_4int message_base             = (fp_4int)0x592E70;
fp_6int message_data             = (fp_6int)0x592EE0;
fp_4int message_big_data         = (fp_4int)0x592FF0;
fp_8int message_lock             = (fp_8int)0x593090;
fp_7int message_landmark         = (fp_7int)0x593110;
fp_3int message_chat             = (fp_3int)0x593190;
fp_1int synch_veh                = (fp_1int)0x593220;
fp_1int synch_base               = (fp_1int)0x593250;
fp_1int synch_energy             = (fp_1int)0x593280;
fp_1int synch_researching        = (fp_1int)0x5932B0;
fp_1int synch_leader             = (fp_1int)0x5932E0;
fp_1int synch_ai                 = (fp_1int)0x593310;
fp_1int synch_research           = (fp_1int)0x593340;
fp_1int sub_593390               = (fp_1int)0x593390;
fp_1int synch_soc                = (fp_1int)0x5933C0;
fp_1int synch_proto              = (fp_1int)0x5933F0;
fp_1int synch_obs                = (fp_1int)0x593420;
fp_2int synch_diplo              = (fp_2int)0x593450;
fp_1int sub_5934B0               = (fp_1int)0x5934B0;
fp_1int synch_radius             = (fp_1int)0x5934E0;
Fhex_cost hex_cost             = (Fhex_cost)0x593510;
fp_7int quick_zoc                = (fp_7int)0x593830;
fp_2int supply_options           = (fp_2int)0x593A00;
fp_3int order_veh                = (fp_3int)0x5947C0;

fp_3int prefs_get2               = (fp_3int)0x59D980;
fp_none default_prefs            = (fp_none)0x59DA20;
fp_none default_prefs2           = (fp_none)0x59DAA0;
fp_none default_warn             = (fp_none)0x59DB20;
fp_none default_rules            = (fp_none)0x59DB30;
fp_3int prefs_get                = (fp_3int)0x59DB40;
fp_none prefs_fac_load           = (fp_none)0x59DBD0;
fp_1int prefs_load               = (fp_1int)0x59DCF0;
fp_2int prefs_put2               = (fp_2int)0x59E510;
fp_3int prefs_put                = (fp_3int)0x59E530;
fp_1int prefs_save               = (fp_1int)0x59E5D0;
fp_none prefs_use                = (fp_none)0x59E950;
fp_3int vulnerable               = (fp_3int)0x59E980;
fp_3int mind_control             = (fp_3int)0x59EA80;
fp_1int corner_market            = (fp_1int)0x59EE50;
fp_4int success_rates            = (fp_4int)0x59EEE0;
fp_4int probe                    = (fp_4int)0x59F120;
fp_2int sub_5A58E0               = (fp_2int)0x5A58E0;
fp_none sub_5A5900               = (fp_none)0x5A5900;
fp_4int sub_5A5910               = (fp_4int)0x5A5910;
fp_1int sub_5A5990               = (fp_1int)0x5A5990;
fp_3int veh_put                  = (fp_3int)0x5A59B0;
fp_1int veh_health               = (fp_1int)0x5A59E0;
fp_5int proto_cost               = (fp_5int)0x5A5A60;
fp_1int base_cost                = (fp_1int)0x5A5D00;
fp_6int make_proto               = (fp_6int)0x5A5D40;
fp_1int proto_sort               = (fp_1int)0x5A6270;
fp_1int proto_sort_2             = (fp_1int)0x5A63D0;
fp_3int radius_move              = (fp_3int)0x5A65A0;
fp_5int radius_move2             = (fp_5int)0x5A65D0;
fp_4int compass_move             = (fp_4int)0x5A6630;
fp_4int encrypt_write            = (fp_4int)0x5A66E0;
fp_4int encrypt_read             = (fp_4int)0x5A67B0;
fp_2int game_io                  = (fp_2int)0x5A6890;
fp_2int game_data                = (fp_2int)0x5A6AC0;
fp_3int map_data                 = (fp_3int)0x5A9280;
FGenString save_daemon        = (FGenString)0x5A94F0;
fp_none see_map_check            = (fp_none)0x5A96D0;
Fload_daemon load_daemon    = (Fload_daemon)0x5A9760;
FGenString save_map_daemon    = (FGenString)0x5A9B20;
FGenString load_map_daemon    = (FGenString)0x5A9C10;
fp_1int yearmotize               = (fp_1int)0x5A9DB0;
fp_1int save_game                = (fp_1int)0x5A9EB0;
fp_2int load_game                = (fp_2int)0x5AAAB0;
fp_none load_map                 = (fp_none)0x5AB600;
fp_none save_map                 = (fp_none)0x5ABB90;
fp_none kill_auto_save           = (fp_none)0x5ABD10;
fp_none auto_save                = (fp_none)0x5ABD20;
fp_1int load_undo                = (fp_1int)0x5ABE40;
fp_none wipe_undo                = (fp_none)0x5ABEC0;
fp_none auto_undo                = (fp_none)0x5ABF20;
fp_2int sub_5ABFF0               = (fp_2int)0x5ABFF0;
fp_1int is_objective             = (fp_1int)0x5AC060;
fp_2int num_objectives           = (fp_2int)0x5AC110;
fp_2int most_objectives          = (fp_2int)0x5AC5A0;
fp_none ascending                = (fp_none)0x5AC680;
fp_1int rankings                 = (fp_1int)0x5AC690;
fp_4int compute_score            = (fp_4int)0x5ACBE0;
fp_none show_replay              = (fp_none)0x5ADBF0;

fp_1int crash_landing            = (fp_1int)0x5AE120;
fp_none time_warp                = (fp_none)0x5AEDE0;
fp_none balance                  = (fp_none)0x5B0420;
fp_none scenario_setup           = (fp_none)0x5B0A30;
fp_1int sub_5B0D70               = (fp_1int)0x5B0D70;
fp_3int setup_player             = (fp_3int)0x5B0E00;
fp_2int eliminate_player         = (fp_2int)0x5B3380;
fp_none clear_scenario           = (fp_none)0x5B38D0;
fp_1int setup_game               = (fp_1int)0x5B3920;
fp_5int social_calc              = (fp_5int)0x5B4210;
fp_1int social_upkeep            = (fp_1int)0x5B44D0;
fp_2int social_upheaval          = (fp_2int)0x5B4550;
fp_1int social_set               = (fp_1int)0x5B4600;
fp_3int society_avail            = (fp_3int)0x5B4730;
fp_6int social_ai                = (fp_6int)0x5B4790;
fp_1int social_select            = (fp_1int)0x5B5620;
fp_3int sort                     = (fp_3int)0x5B5690;
fp_3int sub_5B5700               = (fp_3int)0x5B5700;
fp_2int spot_base                = (fp_2int)0x5B57D0;
fp_2int spot_stack               = (fp_2int)0x5B58E0;
fp_1int unspot_stack             = (fp_1int)0x5B5A70;
fp_3int spot_loc                 = (fp_3int)0x5B5AD0;
fp_3int want_to_wake             = (fp_3int)0x5B5EA0;
fp_1int wake_stack               = (fp_1int)0x5B6060;
fp_2int spot_all                 = (fp_2int)0x5B6260;
fp_3int stack_put                = (fp_3int)0x5B8AF0;
fp_1int stack_sort               = (fp_1int)0x5B8B60;
fp_1int stack_sort2              = (fp_1int)0x5B8C90;
fp_1int stack_fix                = (fp_1int)0x5B8E10;
fp_2int stack_veh                = (fp_2int)0x5B8EE0;
fp_1int stack_kill               = (fp_1int)0x5B9510;
fp_5int stack_check              = (fp_5int)0x5B9580;
fp_none g_WAVE_ctor              = (fp_none)0x5B9C10;
fp_none g_WAVE_dtor              = (fp_none)0x5B9C30;
fp_3int say_tech                 = (fp_3int)0x5B9C40;
fp_2int tech_name2               = (fp_2int)0x5B9EF0;
fp_2int has_tech                 = (fp_2int)0x5B9F20;
fp_2int tech_recurse             = (fp_2int)0x5B9F90;
fp_1int tech_category            = (fp_1int)0x5B9FE0;
fp_2int redundant                = (fp_2int)0x5BA030;
fp_4int facility_avail           = (fp_4int)0x5BA0E0;
fp_3int veh_avail                = (fp_3int)0x5BA910;
fp_3int terrain_avail            = (fp_3int)0x5BAB40;
fp_2int tech_avail               = (fp_2int)0x5BAC20;
fp_1int tech_effects             = (fp_1int)0x5BAE60;
fp_4int tech_achieved            = (fp_4int)0x5BB000;
fp_3int tech_is_preq             = (fp_3int)0x5BCB60;
fp_3int tech_val                 = (fp_3int)0x5BCBE0;
fp_1int tech_ai                  = (fp_1int)0x5BDC10;
fp_1int tech_mil                 = (fp_1int)0x5BDD70;
fp_1int tech_tech                = (fp_1int)0x5BDD90;
fp_1int tech_infra               = (fp_1int)0x5BDDC0;
fp_1int tech_colonize            = (fp_1int)0x5BDDF0;
fp_2int wants_prototype          = (fp_2int)0x5BE100;
fp_1int tech_selection           = (fp_1int)0x5BE380;
fp_1int tech_advance             = (fp_1int)0x5BE530;
fp_1int tech_rate                = (fp_1int)0x5BE6B0;
fp_2int tech_research            = (fp_2int)0x5BE940;
fp_4int tech_pick                = (fp_4int)0x5BEB70;
fp_2int X_text_open              = (fp_2int)0x5BECA0;
fp_3int do_unity_crash           = (fp_3int)0x5BED20;

fp_2int veh_at                   = (fp_2int)0x5BFE90;
fp_1int veh_lift                 = (fp_1int)0x5BFFA0;
fp_3int veh_drop                 = (fp_3int)0x5C0080;
fp_1int sleep                    = (fp_1int)0x5C01A0;
fp_1int veh_demote               = (fp_1int)0x5C01D0;
fp_1int veh_promote              = (fp_1int)0x5C0260;
fp_3int veh_clear                = (fp_3int)0x5C02D0;
fp_4int veh_init                 = (fp_4int)0x5C03D0;
fp_1int veh_kill                 = (fp_1int)0x5C08C0;
fp_1int kill                     = (fp_1int)0x5C0B00;
fp_4int veh_find                 = (fp_4int)0x5C0CB0;
fp_2int can_arty                 = (fp_2int)0x5C0DB0;
fp_3int morale_veh               = (fp_3int)0x5C0E40;
fp_3int offense_proto            = (fp_3int)0x5C1150;
fp_3int armor_proto              = (fp_3int)0x5C1290;
fp_1int speed_proto              = (fp_1int)0x5C13B0;
fp_2int speed                    = (fp_2int)0x5C1540;
fp_1int veh_cargo                = (fp_1int)0x5C1760;
fp_1int prototype_factor         = (fp_1int)0x5C17D0;
Fveh_cost veh_cost             = (Fveh_cost)0x5C1850;
fp_1int veh_selectable           = (fp_1int)0x5C1A20;
fp_1int veh_unmoved              = (fp_1int)0x5C1AB0;
fp_1int veh_ready                = (fp_1int)0x5C1B70;
fp_1int veh_jail                 = (fp_1int)0x5C1C40;
fp_1int veh_skip                 = (fp_1int)0x5C1D20;
fp_2int veh_fake                 = (fp_2int)0x5C1D50;
fp_1int veh_wake                 = (fp_1int)0x5C1D70;

fp_4int world_alt_set            = (fp_4int)0x5C2020;
fp_2int world_raise_alt          = (fp_2int)0x5C2380;
fp_2int world_lower_alt          = (fp_2int)0x5C23E0;
fp_3int brush                    = (fp_3int)0x5C2440;
fp_4int paint_land               = (fp_4int)0x5C27F0;
fp_1int build_continent          = (fp_1int)0x5C28F0;
fp_1int build_hills              = (fp_1int)0x5C2B40;
fp_none world_erosion            = (fp_none)0x5C2CB0;
fp_none world_rocky              = (fp_none)0x5C32A0;
fp_none world_fungus             = (fp_none)0x5C3440;
fp_none world_riverbeds          = (fp_none)0x5C3680;
fp_none world_rivers             = (fp_none)0x5C38B0;
fp_none world_shorelines         = (fp_none)0x5C3F70;
fp_none world_validate           = (fp_none)0x5C40F0;
fp_none world_temperature        = (fp_none)0x5C4170;
fp_none world_rainfall           = (fp_none)0x5C4470;
fp_3int world_site               = (fp_3int)0x5C4FD0;
fp_none world_analysis           = (fp_none)0x5C55C0;
fp_none world_polar_caps         = (fp_none)0x5C58E0;
fp_none world_climate            = (fp_none)0x5C5A30;
fp_none world_linearize_contours = (fp_none)0x5C5AE0;
fp_2int near_landmark            = (fp_2int)0x5C5BD0;
fp_2int world_crater             = (fp_2int)0x5C5C70;
fp_2int world_monsoon            = (fp_2int)0x5C5EF0;
fp_2int world_sargasso           = (fp_2int)0x5C6200;
fp_2int world_ruin               = (fp_2int)0x5C64A0;
fp_2int world_dune               = (fp_2int)0x5C6740;
fp_2int world_diamond            = (fp_2int)0x5C69E0;
fp_2int world_fresh              = (fp_2int)0x5C6C40;
fp_3int world_volcano            = (fp_3int)0x5C6DB0;
fp_2int world_borehole           = (fp_2int)0x5C7020;
fp_2int world_temple             = (fp_2int)0x5C7540;
fp_2int world_unity              = (fp_2int)0x5C7750;
fp_2int world_fossil             = (fp_2int)0x5C7A80;
fp_2int world_canyon             = (fp_2int)0x5C7CB0;
fp_2int world_mesa               = (fp_2int)0x5C7F40;
fp_2int world_ridge              = (fp_2int)0x5C8150;
fp_2int world_geothermal         = (fp_2int)0x5C83B0;
fp_none world_build              = (fp_none)0x5C86E0;
fp_1int game_year                = (fp_1int)0x5C89A0;
fp_1int say_year                 = (fp_1int)0x5C89B0;
fp_3int zoc_any                  = (fp_3int)0x5C89F0;
fp_3int zoc_veh                  = (fp_3int)0x5C8AC0;
fp_3int zoc_sea                  = (fp_3int)0x5C8BA0;
fp_3int zoc_move                 = (fp_3int)0x5C8D40;

FGenString Win_init_class     = (FGenString)0x5F01F0;
fp_none wait_task                = (fp_none)0x5FC700;
fp_none do_task                  = (fp_none)0x5FC7F0;
fp_none do_all_tasks             = (fp_none)0x5FC8F0;
fp_1int do_all_tasks2            = (fp_1int)0x5FC9F0;
fp_none do_non_input             = (fp_none)0x5FCA30;
fp_none do_all_non_input         = (fp_none)0x5FCB20;
fp_none do_draw                  = (fp_none)0x5FCB60;
fp_none do_all_draws             = (fp_none)0x5FCBB0;
fp_none sub_5FCFE0               = (fp_none)0x5FCFE0;
fp_none flush_input              = (fp_none)0x5FD120;
fp_none do_sound                 = (fp_none)0x5FD2B0;
fp_none flush_timer              = (fp_none)0x5FD370;
fp_none text_shutdown            = (fp_none)0x5FD460;
fp_none text_dtor                = (fp_none)0x5FD510;
fp_none text_close               = (fp_none)0x5FD530;
Ftext_open text_open          = (Ftext_open)0x5FD550;
fp_none text_get                 = (fp_none)0x5FD570;
fp_none text_string              = (fp_none)0x5FD5E0;
Ftext_item text_item          = (Ftext_item)0x5FD670;
Ftext_item text_item_string   = (Ftext_item)0x5FD6D0;
fp_none text_item_number         = (fp_none)0x5FD740;
fp_none text_item_binary         = (fp_none)0x5FD7A0;
FGenString text_make_index    = (FGenString)0x5FE1F0;
Ftext_open text_search_index  = (Ftext_open)0x5FE230;
fp_none text_clear_index         = (fp_none)0x5FE270;
fp_1int filefind_set_alternative = (fp_1int)0x6003B0;
fp_2int filefind_init            = (fp_2int)0x600400;
Ffilefind_get filefind_get = (Ffilefind_get)0x6005D0;
FStrings Strings_Strings        = (FStrings)0x6168D0;
FStrings_init Strings_init = (FStrings_init)0x6168F0;
FStrings Strings_shutdown       = (FStrings)0x616950;
FStrings_put Strings_put    = (FStrings_put)0x616970;
FStrings_get Strings_get    = (FStrings_get)0x6169A0;
FStrings Strings_dtor           = (FStrings)0x6169C0;
fp_none labels_shutdown          = (fp_none)0x6169D0;
fp_none labels_init              = (fp_none)0x616A00;
Fparse_string parse_string = (Fparse_string)0x625880;
fp_2int parse_num                = (fp_2int)0x625E30;
fp_4int parse_say                = (fp_4int)0x625E50;
fp_4int parse_says               = (fp_4int)0x625EC0;


